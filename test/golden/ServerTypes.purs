-- File auto generated by purescript-bridge! --
module ServerTypes where

import Prelude
import Control.Alt ((<|>))
import Data.Argonaut.Core (fromArray, fromString, jsonEmptyArray, jsonEmptyObject, jsonNull)
import Data.Argonaut.Decode ((.!=), (.:), (.:?), JsonDecodeError(..), class DecodeJson, decodeJson)
import Data.Argonaut.Decode.Decoders (decodeArray, decodeJArray, decodeJObject, decodeNull)
import Data.Argonaut.Encode ((:=), (~>), class EncodeJson, encodeJson)
import Data.Array (index)
import Data.Bifunctor (lmap)
import Data.Either (Either(..))
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..), maybe)
import Data.Newtype (class Newtype)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Type.Proxy (Proxy(Proxy))

newtype Hello
  = Hello
      { message :: String
      }

derive instance eqHello :: Eq Hello

derive instance ordHello :: Ord Hello

instance showHello :: Show Hello where
  show x = genericShow x

instance encodeJsonHello :: EncodeJson Hello where
  encodeJson =
    case _ of
      Hello {message} ->
        "message" := (let a = message in encodeJson a) ~>
        jsonEmptyObject


instance decodeJsonHello :: DecodeJson Hello where
  decodeJson json =
    do
      x <- decodeJson json
      message <- x .: "message" >>= \json -> decodeJson json
      pure $ Hello {message}

derive instance genericHello :: Generic Hello _

derive instance newtypeHello :: Newtype Hello _

--------------------------------------------------------------------------------

_Hello :: Iso' Hello { message :: String }
_Hello = _Newtype

--------------------------------------------------------------------------------
newtype TestHeader
  = TestHeader String

instance encodeJsonTestHeader :: EncodeJson TestHeader where
  encodeJson =
    case _ of
      TestHeader v0 ->
        (let a = v0 in encodeJson a)


instance decodeJsonTestHeader :: DecodeJson TestHeader where
  decodeJson json =
    lmap (AtKey "contents") $ TestHeader <$>
    ( decodeJson json
    )

derive instance genericTestHeader :: Generic TestHeader _

derive instance newtypeTestHeader :: Newtype TestHeader _

--------------------------------------------------------------------------------

_TestHeader :: Iso' TestHeader String
_TestHeader = _Newtype

--------------------------------------------------------------------------------
