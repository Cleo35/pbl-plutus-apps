-- File auto generated by servant-purescript! --
module ServerAPI where

import Prelude

import Affjax.RequestHeader (RequestHeader(..))
import Data.Argonaut (Json, JsonDecodeError)
import Data.Argonaut.Encode.Aeson ((>/\<))
import Data.Array (catMaybes)
import Data.Either (Either(..))
import Data.Foldable (fold)
import Data.HTTP.Method (Method(..))
import Data.Maybe (Maybe(..))
import Data.Tuple (Tuple(..))
import Servant.PureScript (class MonadAjax, ResponseT, flagQueryPairs, paramListQueryPairs, paramQueryPairs, request, toHeader)
import ServerTypes (Hello, TestHeader)
import URI (PathAbsolute(..), RelativePart(..), RelativeRef(..))
import URI.Path.Segment (segmentNZFromString)
import Affjax.RequestBody (json) as Request
import Affjax.ResponseFormat (json) as Response
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.String.NonEmpty as NES
import URI.Extra.QueryPairs as QP
import URI.Host as Host

getHello ::
  forall m.
  MonadAjax m =>
  Maybe TestHeader ->
  Either (Tuple Int String) Hello ->
  Boolean ->
  Maybe String ->
  Array Hello ->
  ResponseT Json m JsonDecodeError Hello
getHello testHeader reqBody myFlag myParam myParams =
  request req
  where
  req = { method, uri, uriPrintOptions, headers, content, encode, decode, responseFormat }
  method = Left GET
  uri = RelativeRef relativePart query Nothing
  uriPrintOptions = { printUserInfo, printHosts, printPath, printRelPath, printQuery, printFragment }
  headers = catMaybes
    [ RequestHeader "TestHeader" <<< toHeader <$> testHeader
    ]
  content = Just reqBody
  encode = Request.json <<< E.encode encoder
  encoder = E.either (E.tuple (E.value >/\< E.value)) E.value
  decode = D.decode D.value
  responseFormat = Response.json
  relativePart = RelativePartNoAuth
    $ Just
    $ PathAbsolute
    $ Tuple <$> segmentNZ <*> pure segments 
  query = Just { myFlag, myParam, myParams }
  printUserInfo = identity
  printHosts = Host.print
  printPath = identity
  printRelPath = Left
  printQuery = QP.print identity identity <<< queryPairs
  queryPairs q = fold
    [ flagQueryPairs "myFlag" q.myFlag
    , paramQueryPairs "myParam" q.myParam 
    , paramListQueryPairs "myParams" q.myParams
    ]
  printFragment = absurd
  segmentNZ = segmentNZFromString <$> NES.fromString "hello"
  segments = []
