-- File auto generated by servant-purescript! --
module ServerAPI where

import Prelude

import Control.Monad.Aff.Class (class MonadAff)
import Control.Monad.Error.Class (class MonadError)
import Control.Monad.Reader.Class (ask, class MonadAsk)
import Data.Argonaut.Core (stringify)
import Data.Array (catMaybes, null)
import Data.Maybe (Maybe, Maybe(..))
import Data.Nullable (toNullable)
import Data.String (joinWith)
import Network.HTTP.Affjax (AJAX)
import Prim (Array, Boolean, Int, String)
import Servant.PureScript.Affjax (AjaxError, affjax, defaultRequest)
import Servant.PureScript.Settings (SPSettingsDecodeJson_(..), SPSettingsEncodeJson_(..), SPSettings_(..), gDefaultToURLPiece)
import Servant.PureScript.Util (encodeHeader, encodeListQuery, encodeQueryItem, encodeURLPiece, getResult)
import ServerTypes (Hello, TestHeader)

newtype SPParams_ = SPParams_ { testHeader :: Maybe
                              , baseURL :: String
                              }

getHello :: forall eff m.
            MonadAsk (SPSettings_ SPParams_) m => MonadError AjaxError m => MonadAff ( ajax :: AJAX | eff) m
            => Hello -> Boolean -> Maybe (Maybe Hello) -> Array Hello -> m Hello
getHello reqBody myFlag myParam myParams = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let testHeader = spParams_.testHeader
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let queryArgs = catMaybes [
    encodeQueryItem spOpts_' "myFlag" <$> Just myFlag,
    encodeQueryItem spOpts_' "myParam" <$> myParam,
    encodeListQuery spOpts_' "myParams" <$> Just myParams
  ]
  let queryString = if null queryArgs then "" else "?" <> (joinWith "&" queryArgs)
  let reqUrl = baseURL <> "hello" <> queryString
  let reqHeaders =
        [{ field : "TestHeader" , value : encodeHeader spOpts_' testHeader
         }]
  let encodeJson = case spOpts_.encodeJson of SPSettingsEncodeJson_ e -> e
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 , content = toNullable <<< Just <<< stringify <<< encodeJson $ reqBody
                 }
  affResp <- affjax affReq
  let decodeJson = case spOpts_.decodeJson of SPSettingsDecodeJson_ d -> d
  getResult affReq decodeJson affResp

getTestHeader :: forall eff m.
                 MonadAsk (SPSettings_ SPParams_) m => MonadError AjaxError m => MonadAff ( ajax :: AJAX | eff) m
                 => Maybe Hello -> m TestHeader
getTestHeader testHeader = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let queryString = ""
  let reqUrl = baseURL <> "testHeader" <> queryString
  let reqHeaders =
        [{ field : "TestHeader" , value : encodeHeader spOpts_' testHeader
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 }
  affResp <- affjax affReq
  let decodeJson = case spOpts_.decodeJson of SPSettingsDecodeJson_ d -> d
  getResult affReq decodeJson affResp

getBy :: forall eff m.
         MonadAsk (SPSettings_ SPParams_) m => MonadError AjaxError m => MonadAff ( ajax :: AJAX | eff) m
         => m Int
getBy = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let testHeader = spParams_.testHeader
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let queryString = ""
  let reqUrl = baseURL <> "by" <> queryString
  let reqHeaders =
        [{ field : "TestHeader" , value : encodeHeader spOpts_' testHeader
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 }
  affResp <- affjax affReq
  let decodeJson = case spOpts_.decodeJson of SPSettingsDecodeJson_ d -> d
  getResult affReq decodeJson affResp

