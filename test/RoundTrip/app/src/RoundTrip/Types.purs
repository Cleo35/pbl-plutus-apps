-- File auto generated by purescript-bridge! --
module RoundTrip.Types where

import Prelude
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Generic (genericDecodeJsonWith)
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Generic (genericEncodeJsonWith)
import Data.Argonaut.Types.Generic (defaultEncoding)
import Data.Either (Either)
import Data.Functor (class Functor)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Show.Generic (genericShow)
import Data.Symbol (SProxy(SProxy))
import Data.Tuple (Tuple)
import Data.Tuple.Nested (Tuple3, Tuple4)

data TestData
  = Maybe (Maybe TestSum)
  | Either (Either String TestSum)

instance encodeJsonTestData :: EncodeJson TestData where
  encodeJson =
    genericEncodeJsonWith
      defaultEncoding { valuesKey = "contents", unwrapSingleArguments = true }
instance decodeJsonTestData :: DecodeJson TestData where
  decodeJson =
    genericDecodeJsonWith
      defaultEncoding { valuesKey = "contents", unwrapSingleArguments = true }

derive instance eqTestData :: Eq TestData

instance showTestData :: Show TestData where
  show x = genericShow x

derive instance ordTestData :: Ord TestData

derive instance genericTestData :: Generic TestData _

--------------------------------------------------------------------------------

_Maybe :: Prism' TestData (Maybe TestSum)
_Maybe = prism' Maybe f
  where
    f (Maybe a) = Just $ a
    f _ = Nothing

_Either :: Prism' TestData (Either String TestSum)
_Either = prism' Either f
  where
    f (Either a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
data TestSum
  = Nullary
  | Bool Boolean
  | Int Int
  | Number Number
  | String String
  | Array (Array String)
  | Record (TestRecord Int)
  | NestedRecord (TestRecord (TestRecord Int))
  | NT TestNewtype
  | NTRecord TestNewtypeRecord
  | Unit Unit
  | Pair (Tuple Int String)
  | Triple (Tuple3 Int String Boolean)
  | Quad (Tuple4 Int String Boolean Number)
  | NestedSum TestNestedSum
  | Enum TestEnum

instance encodeJsonTestSum :: EncodeJson TestSum where
  encodeJson =
    genericEncodeJsonWith
      defaultEncoding { valuesKey = "contents", unwrapSingleArguments = true }
instance decodeJsonTestSum :: DecodeJson TestSum where
  decodeJson =
    genericDecodeJsonWith
      defaultEncoding { valuesKey = "contents", unwrapSingleArguments = true }

derive instance eqTestSum :: Eq TestSum

instance showTestSum :: Show TestSum where
  show x = genericShow x

derive instance ordTestSum :: Ord TestSum

derive instance genericTestSum :: Generic TestSum _

--------------------------------------------------------------------------------

_Nullary :: Prism' TestSum Unit
_Nullary = prism' (\_ -> Nullary) f
  where
    f Nullary = Just unit
    f _ = Nothing

_Bool :: Prism' TestSum Boolean
_Bool = prism' Bool f
  where
    f (Bool a) = Just $ a
    f _ = Nothing

_Int :: Prism' TestSum Int
_Int = prism' Int f
  where
    f (Int a) = Just $ a
    f _ = Nothing

_Number :: Prism' TestSum Number
_Number = prism' Number f
  where
    f (Number a) = Just $ a
    f _ = Nothing

_String :: Prism' TestSum String
_String = prism' String f
  where
    f (String a) = Just $ a
    f _ = Nothing

_Array :: Prism' TestSum (Array String)
_Array = prism' Array f
  where
    f (Array a) = Just $ a
    f _ = Nothing

_Record :: Prism' TestSum (TestRecord Int)
_Record = prism' Record f
  where
    f (Record a) = Just $ a
    f _ = Nothing

_NestedRecord :: Prism' TestSum (TestRecord (TestRecord Int))
_NestedRecord = prism' NestedRecord f
  where
    f (NestedRecord a) = Just $ a
    f _ = Nothing

_NT :: Prism' TestSum TestNewtype
_NT = prism' NT f
  where
    f (NT a) = Just $ a
    f _ = Nothing

_NTRecord :: Prism' TestSum TestNewtypeRecord
_NTRecord = prism' NTRecord f
  where
    f (NTRecord a) = Just $ a
    f _ = Nothing

_Unit :: Prism' TestSum Unit
_Unit = prism' Unit f
  where
    f (Unit a) = Just $ a
    f _ = Nothing

_Pair :: Prism' TestSum (Tuple Int String)
_Pair = prism' Pair f
  where
    f (Pair a) = Just $ a
    f _ = Nothing

_Triple :: Prism' TestSum (Tuple3 Int String Boolean)
_Triple = prism' Triple f
  where
    f (Triple a) = Just $ a
    f _ = Nothing

_Quad :: Prism' TestSum (Tuple4 Int String Boolean Number)
_Quad = prism' Quad f
  where
    f (Quad a) = Just $ a
    f _ = Nothing

_NestedSum :: Prism' TestSum TestNestedSum
_NestedSum = prism' NestedSum f
  where
    f (NestedSum a) = Just $ a
    f _ = Nothing

_Enum :: Prism' TestSum TestEnum
_Enum = prism' Enum f
  where
    f (Enum a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
newtype TestRecord a
  = TestRecord
      { field1 :: String
      , field2 :: a
      }

instance encodeJsonTestRecord :: (EncodeJson a) => EncodeJson (TestRecord a) where
  encodeJson =
    genericEncodeJsonWith
      defaultEncoding { valuesKey = "contents", unwrapSingleArguments = true }
instance decodeJsonTestRecord :: (DecodeJson a) => DecodeJson (TestRecord a) where
  decodeJson =
    genericDecodeJsonWith
      defaultEncoding { valuesKey = "contents", unwrapSingleArguments = true }

derive instance functorTestRecord :: Functor TestRecord

derive instance eqTestRecord :: (Eq a) => Eq (TestRecord a)

instance showTestRecord :: (Show a) => Show (TestRecord a) where
  show x = genericShow x

derive instance ordTestRecord :: (Ord a) => Ord (TestRecord a)

derive instance genericTestRecord :: Generic (TestRecord a) _

derive instance newtypeTestRecord :: Newtype (TestRecord a) _

--------------------------------------------------------------------------------

_TestRecord :: forall a. Iso' (TestRecord a) { field1 :: String, field2 :: a }
_TestRecord = _Newtype

--------------------------------------------------------------------------------
newtype TestNewtype
  = TestNewtype (TestRecord String)

instance encodeJsonTestNewtype :: EncodeJson TestNewtype where
  encodeJson =
    genericEncodeJsonWith
      defaultEncoding { valuesKey = "contents", unwrapSingleArguments = true }
instance decodeJsonTestNewtype :: DecodeJson TestNewtype where
  decodeJson =
    genericDecodeJsonWith
      defaultEncoding { valuesKey = "contents", unwrapSingleArguments = true }

derive instance eqTestNewtype :: Eq TestNewtype

instance showTestNewtype :: Show TestNewtype where
  show x = genericShow x

derive instance ordTestNewtype :: Ord TestNewtype

derive instance genericTestNewtype :: Generic TestNewtype _

derive instance newtypeTestNewtype :: Newtype TestNewtype _

--------------------------------------------------------------------------------

_TestNewtype :: Iso' TestNewtype (TestRecord String)
_TestNewtype = _Newtype

--------------------------------------------------------------------------------
newtype TestNewtypeRecord
  = TestNewtypeRecord
      { unTestNewtypeRecord :: TestNewtype
      }

instance encodeJsonTestNewtypeRecord :: EncodeJson TestNewtypeRecord where
  encodeJson =
    genericEncodeJsonWith
      defaultEncoding { valuesKey = "contents", unwrapSingleArguments = true }
instance decodeJsonTestNewtypeRecord :: DecodeJson TestNewtypeRecord where
  decodeJson =
    genericDecodeJsonWith
      defaultEncoding { valuesKey = "contents", unwrapSingleArguments = true }

derive instance eqTestNewtypeRecord :: Eq TestNewtypeRecord

instance showTestNewtypeRecord :: Show TestNewtypeRecord where
  show x = genericShow x

derive instance ordTestNewtypeRecord :: Ord TestNewtypeRecord

derive instance genericTestNewtypeRecord :: Generic TestNewtypeRecord _

derive instance newtypeTestNewtypeRecord :: Newtype TestNewtypeRecord _

--------------------------------------------------------------------------------

_TestNewtypeRecord :: Iso' TestNewtypeRecord { unTestNewtypeRecord :: TestNewtype }
_TestNewtypeRecord = _Newtype

--------------------------------------------------------------------------------
data TestNestedSum
  = Case1 String
  | Case2 Int
  | Case3 (TestRecord Int)

instance encodeJsonTestNestedSum :: EncodeJson TestNestedSum where
  encodeJson =
    genericEncodeJsonWith
      defaultEncoding { valuesKey = "contents", unwrapSingleArguments = true }
instance decodeJsonTestNestedSum :: DecodeJson TestNestedSum where
  decodeJson =
    genericDecodeJsonWith
      defaultEncoding { valuesKey = "contents", unwrapSingleArguments = true }

derive instance eqTestNestedSum :: Eq TestNestedSum

instance showTestNestedSum :: Show TestNestedSum where
  show x = genericShow x

derive instance ordTestNestedSum :: Ord TestNestedSum

derive instance genericTestNestedSum :: Generic TestNestedSum _

--------------------------------------------------------------------------------

_Case1 :: Prism' TestNestedSum String
_Case1 = prism' Case1 f
  where
    f (Case1 a) = Just $ a
    f _ = Nothing

_Case2 :: Prism' TestNestedSum Int
_Case2 = prism' Case2 f
  where
    f (Case2 a) = Just $ a
    f _ = Nothing

_Case3 :: Prism' TestNestedSum (TestRecord Int)
_Case3 = prism' Case3 f
  where
    f (Case3 a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
data TestEnum
  = Mon
  | Tue
  | Wed
  | Thu
  | Fri
  | Sat
  | Sun

instance encodeJsonTestEnum :: EncodeJson TestEnum where
  encodeJson =
    genericEncodeJsonWith
      defaultEncoding { valuesKey = "contents", unwrapSingleArguments = true }
instance decodeJsonTestEnum :: DecodeJson TestEnum where
  decodeJson =
    genericDecodeJsonWith
      defaultEncoding { valuesKey = "contents", unwrapSingleArguments = true }

derive instance eqTestEnum :: Eq TestEnum

instance showTestEnum :: Show TestEnum where
  show x = genericShow x

derive instance ordTestEnum :: Ord TestEnum

derive instance genericTestEnum :: Generic TestEnum _

--------------------------------------------------------------------------------

_Mon :: Prism' TestEnum Unit
_Mon = prism' (\_ -> Mon) f
  where
    f Mon = Just unit
    f _ = Nothing

_Tue :: Prism' TestEnum Unit
_Tue = prism' (\_ -> Tue) f
  where
    f Tue = Just unit
    f _ = Nothing

_Wed :: Prism' TestEnum Unit
_Wed = prism' (\_ -> Wed) f
  where
    f Wed = Just unit
    f _ = Nothing

_Thu :: Prism' TestEnum Unit
_Thu = prism' (\_ -> Thu) f
  where
    f Thu = Just unit
    f _ = Nothing

_Fri :: Prism' TestEnum Unit
_Fri = prism' (\_ -> Fri) f
  where
    f Fri = Just unit
    f _ = Nothing

_Sat :: Prism' TestEnum Unit
_Sat = prism' (\_ -> Sat) f
  where
    f Sat = Just unit
    f _ = Nothing

_Sun :: Prism' TestEnum Unit
_Sun = prism' (\_ -> Sun) f
  where
    f Sun = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
